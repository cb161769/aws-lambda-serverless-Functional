
service: aws-dynamodb-cognito-api
frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  environment:
    TOPIC_NAME: ${self:custom.topicName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:GetObject
        - s3:PutObject
        - sns:Publish
      Resource: "*"
  
custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}
  topicName: sns-topic-to-client
package:
  individually: true
functions:
  dataArchive:
    handler: job/cron-job-handler.handler
    description: Lectura de archivos para s3
    timeout: 30
    events: 
     - schedule:
          description: "Archive the data generated yesterday to S3"
          rate: cron(0 2 * * ? *)
  hello:
    handler: handler.handler
    events:
      - http:
          path: /getAllDeviceReadings
          method: get
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
      - http:
          path: /{proxy+}
          method: any
          cors: true
  iot:
    handler: helpers/iot/iot-handler.handler
    events:
      - http:
          path: /iot
          method: post
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  sns:
    handler: job/automation-cron-handler.handler
    description: Automatizacion de consumo
    timeout: 30
    events:
       - schedule:
          description: "Archive the data generated yesterday to S3"
          rate: rate(1 hour)
resources:
  Description: Monitoreo Continuo de los dispositivos
  Resources:
    dataSheetReadings:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "devicetable-datasheet-readings"
    ###
    # Tabla de las lecturas del dispositivo.
    ###
    deviceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "deviceTable"
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    deviceConfiguration:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "deviceConfiguration"
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    relaysConfiguration:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "relaysConfiguration"
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DeviceConnection: 
      Type:  AWS::DynamoDB::Table
      Properties:
        TableName: "DeviceConnection"
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5 
    userLogs:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "userLogs"
        AttributeDefinitions:
          - AttributeName: logId
            AttributeType: S
        KeySchema:
          - AttributeName: logId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5 
    fareConfiguration: 
      Type:  AWS::DynamoDB::Table
      Properties:
        TableName: "fareConfiguration"
        AttributeDefinitions:
          - AttributeName: fareConfigurationId
            AttributeType: S
        KeySchema:
          - AttributeName: fareConfigurationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5 
    deviceReadings:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "deviceReadings"
        AttributeDefinitions:
          - AttributeName: "primarykey"
            AttributeType: S
          - AttributeName: "sortkey"
            AttributeType: N
        KeySchema:
          - AttributeName: "primarykey"
            KeyType: HASH
          - AttributeName: "sortkey"
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    iotRule:
      Type: AWS::IoT::TopicRule
      Properties:
        TopicRulePayload:
          Actions:
            - 
              DynamoDBv2:
                PutItem:
                  TableName: "deviceReadings"
                RoleArn: !GetAtt [iotRuleAllowDynamoWrites, Arn]
          AwsIotSqlVersion: "2016-03-23"
          Description: "Forwards incoming sensor messages to DynamoDB for analysis"
          RuleDisabled: false
          Sql: >-
            SELECT *, 
                  'ArduinoDevice01' as primarykey, 
                  (timestamp() / 1000) as sortkey,
                  ((timestamp() / 1000) + 2592000) as ttl
                  from 'deviceReadings'   
    iotPolicyForDevices:
      Type: AWS::IoT::Policy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "iot:Connect"
              Resource: "*"
              Condition:
                Bool:
                  "iot:Connection.Thing.IsAttached": [true]
            -
              Effect: "Allow"
              Action:
                - "iot:Publish"
              Resource: 
                - Fn::Join:
                   - ""
                   - - "arn:aws:iot:"
                     - Ref: AWS::Region
                     - ":"
                     - Ref: AWS::AccountId
                     - ":topic/$aws/rules/"
                     - Ref: iotRule
    secondPolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "iot:"
              Resource: "*"
              Condition:
                Bool:
                  "iot:Connection.Thing.IsAttached": [true]
    ### 
    # Rol para el topico de la rol
    ####
    iotRuleAllowDynamoWrites:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "iot.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: "Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                  Resource: !GetAtt [deviceReadings, Arn]
        # cognito user pool
        ##
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
        Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: false
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: false
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}       

